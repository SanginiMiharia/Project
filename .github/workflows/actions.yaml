---
name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
   build:
     runs-on: ubuntu-latest
     permissions:
      contents: write
      security-events: write # Required for CodeQL SARIF upload
     steps:
       - name: Checkout code
         uses: actions/checkout@v3
      # Secret Scanning Step
       - name: Run Secret Scanning
         run: |
           docker run --rm -v ${{ github.workspace }}:/repo zricethezav/gitleaks:v8.2.7 detect --source=/repo --report-format=json --report-path=/repo/gitleaks_report.json

       - name: Add Docker's GPG key and repository
         run: >
           sudo apt-get update

           sudo apt-get install -y ca-certificates curl

           sudo install -m 0755 -d /etc/apt/keyrings

           sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc

           sudo chmod a+r /etc/apt/keyrings/docker.asc

           # Add Docker repository to Apt sources

           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

           sudo apt-get update
       - name: Install Docker
         run: >
           sudo apt-get install -y docker-ce docker-ce-cli containerd.io
           docker-buildx-plugin docker-compose-plugin
       - name: Check if Docker is working
         run: sudo docker run hello-world
       - name: Login to Docker Hub
         uses: docker/login-action@v2
         with:
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_PASSWORD }}
       - name: Check docker is working fine
         run: docker ps

        # Step 4: Source Composition Analysis (SCA) with Trivy
       - name: Run Source Composition Analysis with Trivy
         run: |
            docker run --rm -v ${{ github.workspace }}:/repo aquasec/trivy fs /repo \
            --severity CRITICAL,HIGH \
            --exit-code 1 \
            --output /repo/trivy_sca_report.txt

    # Step 5: Upload SCA Report
       - name: Upload SCA Report
         uses: actions/upload-artifact@v3
         with:
          name: Trivy-SCA-Report
          path: ./trivy_sca_report.txt

    # Step 4: Static Application Security Testing (SAST) with CodeQL

       - name: Initialize CodeQL database
         uses: github/codeql-action/init@v2
         with:
          languages: 'javascript'

       - name: Perform CodeQL Analysis
         uses: github/codeql-action/analyze@v2
         with:
          category: 'security' # For security alerts in GitHub
          output: codeql-results.sarif

       - name: Inspect SARIF File
         run: |
          echo "SARIF file details:"
          ls -l codeql-results.sarif
          cat codeql-results.sarif || echo "SARIF file is empty."

       - name: Upload SARIF File for Debugging
         uses: actions/upload-artifact@v3
         with:
          name: CodeQL-SARIF
          path: codeql-results.sarif


       - name: Build Docker image
         run: |
           docker build -t sanginimiharia2002/simple-webapp .
       - name: Push Docker image
         run: |
           docker push sanginimiharia2002/simple-webapp

   deploy:
      needs: build
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      #- name: SSh to ec2 with minkube
      #  run: ssh -i ${{secrets.PEM_FILE}} ubuntu@51.20.98.144 -y

      - name: Create SSH key file
        run: |
          echo "${{ secrets.PEM_FILE }}" > ~/my_key.pem
          chmod 600 ~/my_key.pem

      - name: SSH to EC2 with Minikube
        run: ssh -i ~/my_key.pem -o StrictHostKeyChecking=no ubuntu@16.171.116.27

      - name: Clone project
        run: git clone https://github.com/SanginiMiharia/Project.git

      - name: ls
        run: ls -la 

      - name: Go to Simple-webapp
        run: cd simple-webapp

      - name: Pull docker image
        run: docker pull sanginimiharia2002/simple-webapp

      - name: Start minikube
        run: minikube start

      - name: Download Helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm
          
      - name: Deploy to Kubernetes with Helm
        run: |
          helm upgrade --install simple-webapp ./helm-chart \
            --set image.repository=sanginimiharia2002/simple-webapp \
            --set image.tag=latest
      # Step 4: DAST Scan with OWASP ZAP


      - name: Start OWASP ZAP
        run: |
          docker run -d -u zap -p 8080:8080 owasp/zap2docker-stable zap.sh -daemon -port 8080 -host 0.0.0.0 || exit 1
          docker login -u sanginimiharia2002


      # Wait for ZAP to start (consider adding a health check instead)
      - name: Wait for ZAP to start
        run: |
          sleep 30 

      - name: Run DAST Scan
        run: |
          docker run --network host owasp/zap2docker-stable zap.sh -quickurl http://192.168.49.2:30001 -quickout zap_report.html -timeout 300

      - name: Upload DAST Report
        uses: actions/upload-artifact@v3
        with:
          name: DAST-Report
          path: zap_report.html
       

            